async function fetchData(userId){try{const response=await fetch('https://api-router.enfarm.com/api/v3/farm/total-farms-per-user',{method:'POST',headers:{'Accept':'application/json','Content-Type':'application/json'},body:JSON.stringify({"user_id":userId})});return await response.json();}catch(error){console.error('Error fetching data:',error);}}
function countTreeTypes(data){return data.content.data.reduce((counts,farm)=>{farm.cultivates.forEach(cultivate=>{counts[`tree_type${cultivate.tree_type}`]++;});return counts;},{tree_type0:0,tree_type1:0,tree_type2:0,tree_type3:0});}
function updateCounts(combinedCounts){Object.entries(combinedCounts).forEach(([key,value])=>{document.getElementById(key).innerText=value;});}
async function fetchDataAndCount(userId){const apiResponse=await fetchData(userId);if(apiResponse){return countTreeTypes(apiResponse);}
return null;}
Promise.all([fetchDataAndCount(236),fetchDataAndCount(260)]).then(([counts236,counts260])=>{if(counts236&&counts260){updateCounts({totalcoffeefarmsCount:counts236.tree_type0+counts260.tree_type0,totaldurianfarmsCount:counts236.tree_type1+counts260.tree_type1,totalpepperfarmsCount:counts236.tree_type2+counts260.tree_type2,totalteafarmsCount:counts236.tree_type3+counts260.tree_type3});const ctx=document.getElementById('treeTypeChart').getContext('2d');const treeTypeChart=new Chart(ctx,{type:'doughnut',data:{labels:['Coffee','Durian','Pepper','Tea'],datasets:[{label:'Count',data:[counts236.tree_type0+counts260.tree_type0,counts236.tree_type1+counts260.tree_type1,counts236.tree_type2+counts260.tree_type2,counts236.tree_type3+counts260.tree_type3],backgroundColor:['rgba(159,75,36,255)','rgba(255,193,7,255)','rgba(255,61,0,255)','rgba(87,139,66,255)'],borderWidth:1}]},options:{cutoutPercentage:70,responsive:true,maintainAspectRatio:false,plugins:{legend:{labels:{usePointStyle:true,pointStyle:'square'}},tooltip:{callbacks:{label:function(context){const label=context.label||'';const value=context.formattedValue;const total=context.chart.data.datasets[0].data.reduce((a,b)=>a+b,0);const percentage=((context.raw/total)*100).toFixed(2);return`${value}(${percentage}%)`;}}}}}});}});