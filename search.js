let userFarms=[];let allLocations=[];let suggestionsContainer;const searchInput=document.getElementById('searchInput');const API_ENDPOINTS={USER_FARMS:'https://api-router.enfarm.com/api/v3/farm/total-farms-per-user',ALL_LOCATIONS:'https://api-ma.enfarm.com/api/v1/ma/get-install-locations'};const CONFIG={MAX_SUGGESTIONS:5};async function fetchUserFarms(){const userIDsRaw=localStorage.getItem('userId');if(!userIDsRaw){console.error('User ID(s) not found in localStorage');return;}
let userIDs;try{userIDs=JSON.parse(userIDsRaw);}catch(e){userIDs=userIDsRaw.split(',').map(id=>id.trim());}
const userIDArray=Array.isArray(userIDs)?userIDs:[userIDs];userFarms=userIDArray.includes('admin')?await fetchAllUserFarms():await fetchFarmsForUsers(userIDArray);}
async function fetchAllUserFarms(){console.log('Fetching farms for all users (admin functionality)');const allUserIDs=[236,260,261,990,1454];return await fetchFarmsForUsers(allUserIDs);}
async function fetchFarmsForUsers(userIDs){const validUserIDs=userIDs.filter(id=>!isNaN(parseInt(id)));const promises=validUserIDs.map(async userID=>{const options={method:'POST',headers:{'accept':'application/json','Content-Type':'application/json'},body:JSON.stringify({user_id:parseInt(userID)})};try{const response=await fetch(API_ENDPOINTS.USER_FARMS,options);const responseData=await response.json();if(response.ok&&responseData.status_code===200&&responseData.content&&responseData.content.data){return responseData.content.data;}else{console.error(`Error fetching farms for user ID ${userID}:`,responseData);return[];}}catch(error){console.error(`Error fetching farms for user ID ${userID}:`,error);return[];}});const results=await Promise.all(promises);return results.flat();}
async function fetchAllLocations(){try{const response=await fetch(API_ENDPOINTS.ALL_LOCATIONS);const data=await response.json();if(data.status_code===200){allLocations=data.content;}else{throw new Error('Unexpected API response');}}catch(error){console.error('Error fetching all locations:',error);allLocations=[];}}
function combineFarmData(){const locationMap=new Map(allLocations.map(loc=>[loc.farmid,loc]));userFarms=userFarms.map(farm=>{const location=locationMap.get(farm.farm_id);return location?{...farm,lat:location.lat,long:location.long}:farm;});}
async function initializeSearch(){await Promise.all([fetchUserFarms(),fetchAllLocations()]);combineFarmData();createSuggestionsContainer();setupEventListeners();}
function createSuggestionsContainer(){suggestionsContainer=document.createElement('div');suggestionsContainer.id='suggestionsContainer';const searchBarContainer=document.querySelector('.search-bar-container');if(searchBarContainer){searchBarContainer.appendChild(suggestionsContainer);}else{console.error("Could not find .search-bar-container");}}
function setupEventListeners(){if(searchInput){searchInput.addEventListener('input',debounce(showSuggestions,300));searchInput.addEventListener('keypress',handleKeyPress);}else{console.error("Search input element not found");}
if(suggestionsContainer){suggestionsContainer.addEventListener('click',handleSuggestionClick);}
document.addEventListener('click',hideSuggestionsOnOutsideClick);}
const debounce=(func,delay)=>{let timeoutId;return(...args)=>{clearTimeout(timeoutId);timeoutId=setTimeout(()=>func.apply(this,args),delay);};};function showSuggestions(){const searchTerm=searchInput.value.toLowerCase().trim();if(searchTerm.length===0){suggestionsContainer.style.display='none';return;}
const matchingSuggestions=userFarms.filter(farm=>farm.farm_name.toLowerCase().includes(searchTerm)).slice(0,CONFIG.MAX_SUGGESTIONS);suggestionsContainer.innerHTML=matchingSuggestions.length>0?matchingSuggestions.map(farm=>`
            <div class="suggestion" data-farm-id="${farm.farm_id}">
                <span class="material-symbols-outlined">psychiatry</span>
                <span>${farm.farm_name}</span>
            </div>
        `).join(''):`<div class="suggestion no-result">
            <span class="material-symbols-outlined">error_outline</span>
            <span>No result</span>
        </div>`;suggestionsContainer.style.display='block';}
function handleSuggestionClick(e){const suggestionElement=e.target.closest('.suggestion');if(!suggestionElement||suggestionElement.classList.contains('no-result'))return;const selectedFarmName=suggestionElement.querySelector('span:last-child').textContent;searchInput.value=selectedFarmName;suggestionsContainer.style.display='none';const selectedFarm=userFarms.find(farm=>farm.farm_name===selectedFarmName);if(selectedFarm){document.dispatchEvent(new CustomEvent('farmSelected',{detail:selectedFarm,bubbles:true,composed:true}));if(selectedFarm.lat&&selectedFarm.long){zoomToMarker(selectedFarm.lat,selectedFarm.long);}}}
function handleKeyPress(event){if(event.key==='Enter'){suggestionsContainer.style.display='none';handleSearch();}}
function handleSearch(){const searchTerm=searchInput.value.toLowerCase().trim();const matchingFarms=userFarms.filter(farm=>farm.farm_name.toLowerCase().includes(searchTerm));if(matchingFarms.length>0){document.dispatchEvent(new CustomEvent('farmsFound',{detail:matchingFarms}));if(matchingFarms.length===1&&matchingFarms[0].lat&&matchingFarms[0].long){zoomToMarker(matchingFarms[0].lat,matchingFarms[0].long);}}else{alert("No farms found matching your search. Please try a different name.");}}
function hideSuggestionsOnOutsideClick(e){if(suggestionsContainer&&searchInput&&e.target!==searchInput&&!suggestionsContainer.contains(e.target)){suggestionsContainer.style.display='none';}}
initializeSearch();console.log('Search script loaded and executed');