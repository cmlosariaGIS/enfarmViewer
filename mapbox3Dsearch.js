let userFarms=[];let suggestionsContainer;const searchInput=document.getElementById('searchInput');const API_ENDPOINTS={USER_FARMS:'https://api-router.enfarm.com/api/v3/farm/total-farms-per-user',ALL_LOCATIONS:'https://api-ma.enfarm.com/api/v1/ma/get-install-locations'};const CONFIG={MAX_SUGGESTIONS:5};async function fetchUserFarms(){console.log('Fetching user farms...');const userIDsRaw=localStorage.getItem('userId');console.log('User IDs from localStorage:',userIDsRaw);if(!userIDsRaw){console.error('User ID(s) not found in localStorage');return;}
let userIDs;try{userIDs=JSON.parse(userIDsRaw);}catch(e){userIDs=userIDsRaw.split(',').map(id=>id.trim());}
console.log('Parsed user IDs:',userIDs);const userIDArray=Array.isArray(userIDs)?userIDs:[userIDs];console.log('User ID Array:',userIDArray);userFarms=userIDArray.includes('admin')?await fetchAllUserFarms():await fetchFarmsForUsers(userIDArray);console.log('Fetched user farms:',userFarms);}
async function fetchAllUserFarms(){console.log('Fetching farms for all users (admin functionality)');const allUserIDs=[236,260,261,990,1454];return await fetchFarmsForUsers(allUserIDs);}
async function fetchFarmsForUsers(userIDs){console.log('Fetching farms for users:',userIDs);const validUserIDs=userIDs.filter(id=>!isNaN(parseInt(id)));const promises=validUserIDs.map(async userID=>{const options={method:'POST',headers:{'accept':'application/json','Content-Type':'application/json'},body:JSON.stringify({user_id:parseInt(userID)})};try{const response=await fetch(API_ENDPOINTS.USER_FARMS,options);const responseData=await response.json();if(response.ok&&responseData.status_code===200&&responseData.content&&responseData.content.data){console.log(`Farms fetched for user ID ${userID}:`,responseData.content.data);return responseData.content.data;}else{console.error(`Error fetching farms for user ID ${userID}:`,responseData);return[];}}catch(error){console.error(`Error fetching farms for user ID ${userID}:`,error);return[];}});const results=await Promise.all(promises);return results.flat();}
async function initializeSearch(){console.log('Initializing search...');await fetchUserFarms();setupEventListeners();console.log('Search initialization complete');}
function setupEventListeners(){console.log('Setting up event listeners...');suggestionsContainer=document.getElementById('suggestionsContainer');if(searchInput){searchInput.addEventListener('input',handleInput);searchInput.addEventListener('keypress',handleKeyPress);console.log('Event listeners added to search input');}else{console.error("Search input element not found");}
if(suggestionsContainer){suggestionsContainer.addEventListener('click',handleSuggestionClick);console.log('Event listener added to suggestions container');}else{console.error("Suggestions container not found");}
const clearButton=document.querySelector('.clear-button');if(clearButton){clearButton.addEventListener('click',clearSearch);console.log('Event listener added to clear button');}else{console.error("Clear button not found");}
document.addEventListener('click',hideSuggestionsOnOutsideClick);}
function handleInput(){const clearButton=document.querySelector('.clear-button');if(searchInput.value.trim()!==''){clearButton.style.display='block';}else{clearButton.style.display='none';}
debounce(showSuggestions,300)();}
function clearSearch(){console.log('Clearing search');searchInput.value='';document.querySelector('.clear-button').style.display='none';suggestionsContainer.style.display='none';searchInput.focus();}
const debounce=(func,delay)=>{let timeoutId;return(...args)=>{clearTimeout(timeoutId);timeoutId=setTimeout(()=>func.apply(this,args),delay);};};function showSuggestions(){console.log('Showing suggestions...');const searchTerm=searchInput.value.toLowerCase().trim();console.log('Search term:',searchTerm);if(searchTerm.length===0){suggestionsContainer.style.display='none';return;}
const matchingSuggestions=userFarms.filter(farm=>farm.farm_name.toLowerCase().includes(searchTerm)).slice(0,CONFIG.MAX_SUGGESTIONS);console.log('Matching suggestions:',matchingSuggestions);suggestionsContainer.innerHTML=matchingSuggestions.length>0?matchingSuggestions.map(farm=>`
            <div class="suggestion" data-farm-id="${farm.farm_id}">
                <span class="material-symbols-outlined">psychiatry</span>
                <span>${farm.farm_name}</span>
            </div>
        `).join(''):`<div class="suggestion no-result">
            <span class="material-symbols-outlined">error_outline</span>
            <span>No result</span>
        </div>`;suggestionsContainer.style.display='block';console.log('Suggestions container HTML:',suggestionsContainer.innerHTML);console.log('Suggestions container display style:',suggestionsContainer.style.display);}
function handleSuggestionClick(e){console.log('Suggestion clicked');const suggestionElement=e.target.closest('.suggestion');if(!suggestionElement||suggestionElement.classList.contains('no-result'))return;const selectedFarmName=suggestionElement.querySelector('span:last-child').textContent;searchInput.value=selectedFarmName;suggestionsContainer.style.display='none';const selectedFarm=userFarms.find(farm=>farm.farm_name===selectedFarmName);if(selectedFarm){console.log('Selected farm:',selectedFarm);flyToFarm(selectedFarm);}}
function handleKeyPress(event){if(event.key==='Enter'){console.log('Enter key pressed');suggestionsContainer.style.display='none';searchFeatures(searchInput.value);}}
async function flyToFarm(farm){try{const response=await fetch(API_ENDPOINTS.ALL_LOCATIONS);const data=await response.json();if(data.status_code===200&&data.content){const farmLocation=data.content.find(location=>location.farmid===farm.farm_id);if(farmLocation){console.log(`Flying to ${farm.farm_name} at coordinates: ${farmLocation.lat}, ${farmLocation.long}`);map.flyTo({center:[farmLocation.long,farmLocation.lat],zoom:15,essential:true});}else{console.error(`Coordinates not found for farm: ${farm.farm_name}`);alert(`Unable to locate ${farm.farm_name}. Please try another search.`);}}else{throw new Error('Unexpected API response');}}catch(error){console.error('Error fetching location data:',error);alert('An error occurred while trying to locate the farm. Please try again later.');}}
async function searchFeatures(query){console.log('Searching features for query:',query);const clearButton=document.querySelector('.clear-button');if(query.trim()!==''){clearButton.style.display='block';}else{clearButton.style.display='none';}
try{const response=await fetch(API_ENDPOINTS.ALL_LOCATIONS);const data=await response.json();const filteredLocations=data.content.filter(location=>{return location.farmname.toLowerCase().includes(query.toLowerCase());});if(filteredLocations.length>0){filteredLocations.forEach(location=>{console.log(`Adding marker for ${location.farmname}`);});console.log(`Flying to ${filteredLocations[0].farmname}`);}else{alert("No match found");}}catch(error){console.error('Error fetching or processing data:',error);}}
function clearSearch(){console.log('Clearing search');searchInput.value='';document.querySelector('.clear-button').style.display='none';suggestionsContainer.style.display='none';}
function hideSuggestionsOnOutsideClick(e){if(suggestionsContainer&&searchInput&&e.target!==searchInput&&!suggestionsContainer.contains(e.target)){suggestionsContainer.style.display='none';}}
initializeSearch();console.log('Search script loaded and executed');