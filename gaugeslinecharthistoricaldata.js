function toggleFarmTypeElements(){const gaugeWrapper=document.querySelector('.gauge-wrapper');const durianCharts=document.querySelector('.durian-charts');gaugeWrapper.setAttribute('data-farm-type',farmType);durianCharts.setAttribute('data-farm-type',farmType);document.querySelectorAll('[data-farm-type]').forEach(element=>{if(element.dataset.farmType===farmType||element.dataset.farmType==='both'){element.style.display=''}else{element.style.display='none'}})}
let treeType="";let farmType="";let npkChart
let npkGauge
let ntsChart,p205Chart,k2oChart;let ntsGauge,p205Gauge,k2oGauge;let moistChart,pHChart,tempChart;let moistGauge,pHGauge,tempGauge;let chartData={sortedNpkValues:[],sortedNtsValues:[],sortedP205Values:[],sortedk2oValues:[],sortedDates:[],sortedMoistValues:[],sortedPHValues:[],sortedTValues:[]};let sortedNpkValues
let sortedNtsValues,sortedP205Values,sortedk2oValues;let sortedDates,sortedMoistValues,sortedPHValues,sortedTValues;function getTranslatedText(key){return translations[currentLang][key]||key}
document.addEventListener("DOMContentLoaded",function(){const popupHistoricalSoilData=document.querySelector(".popup-historicalsoildata");popupHistoricalSoilData.style.display="none"});document.addEventListener("DOMContentLoaded",function(){var closeBtn=document.querySelector(".close-btn");var popup=document.querySelector(".popup-historicalsoildata");closeBtn.addEventListener("click",function(){resetCharts();popup.style.display="none"})});function resetCharts(){if(npkChart){npkChart.destroy();npkChart=null}
if(ntsChart){ntsChart.destroy();ntsChart=null}
if(p205Chart){p205Chart.destroy();p205Chart=null}
if(k2oChart){k2oChart.destroy();k2oChart=null}
if(moistChart){moistChart.destroy();moistChart=null}
if(pHChart){pHChart.destroy();pHChart=null}
if(tempChart){tempChart.destroy();tempChart=null}
if(npkGauge){npkGauge.destroy();npkGauge=null}
if(ntsGauge){ntsGauge.destroy();ntsGauge=null}
if(p205Gauge){p205Gauge.destroy();p205Gauge=null}
if(k2oGauge){k2oGauge.destroy();k2oGauge=null}
if(moistGauge){moistGauge.destroy();moistGauge=null}
if(pHGauge){pHGauge.destroy();pHGauge=null}
if(tempGauge){tempGauge.destroy();tempGauge=null}
resetChartMessages();const buttons=document.querySelectorAll('.timeTrend-buttons button');buttons.forEach(btn=>btn.classList.remove('active'));const npkMinMax=document.getElementById('npkMinMax');if(npkMinMax)npkMinMax.remove();const ntsMinMax=document.getElementById('ntsMinMax');if(ntsMinMax)ntsMinMax.remove();const p205MinMax=document.getElementById('p205MinMax');if(p205MinMax)p205MinMax.remove();const k2oMinMax=document.getElementById('k2oMinMax');if(k2oMinMax)k2oMinMax.remove();const moistMinMax=document.getElementById('moistMinMax');if(moistMinMax)moistMinMax.remove();const pHMinMax=document.getElementById('pHMinMax');if(pHMinMax)pHMinMax.remove();const tempMinMax=document.getElementById('tempMinMax');if(tempMinMax)tempMinMax.remove();}
function resetChartMessages(){const npkHeader=document.querySelector('.headerNPK .title');if(npkHeader)npkHeader.innerHTML='';const npkStatus=document.querySelector('.headerNPK .nutrient-status');if(npkStatus)npkStatus.remove();const ntsHeader=document.querySelector('.headerNTS .title');if(ntsHeader)ntsHeader.innerHTML='';const ntsStatus=document.querySelector('.headerNTS .nts-status');if(ntsStatus)ntsStatus.remove();const p205Header=document.querySelector('.headerP205 .title');if(p205Header)p205Header.innerHTML='';const p205Status=document.querySelector('.headerP205 .p205-status');if(p205Status)p205Status.remove();const k2oHeader=document.querySelector('.headerk2o .title');if(k2oHeader)k2oHeader.innerHTML='';const k2oStatus=document.querySelector('.headerk2o .k2o-status');if(k2oStatus)k2oStatus.remove();const moistHeader=document.querySelector('.headerMoist .title');if(moistHeader)moistHeader.innerHTML='';const moistStatus=document.querySelector('.headerMoist .moisture-status');if(moistStatus)moistStatus.remove();const phHeader=document.querySelector('.headerpH .title');if(phHeader)phHeader.innerHTML='';const phStatus=document.querySelector('.headerpH .ph-status');if(phStatus)phStatus.remove();const tempHeader=document.querySelector('.headerTemp .title');if(tempHeader)tempHeader.innerHTML='';const tempStatus=document.querySelector('.headerTemp .temp-status');if(tempStatus)tempStatus.remove();clearGaugeCanvas('npkGauge');clearGaugeCanvas('ntsGauge');clearGaugeCanvas('p205Gauge');clearGaugeCanvas('k2oGauge');clearGaugeCanvas('moistGauge');clearGaugeCanvas('pHGauge');clearGaugeCanvas('tempGauge')}
function clearGaugeCanvas(canvasId){const canvas=document.getElementById(canvasId);if(canvas){const ctx=canvas.getContext('2d');ctx.clearRect(0,0,canvas.width,canvas.height)}}
function setupNPKObserver(){const observerTarget=document.querySelector('.headerNPK');if(observerTarget){const observer=new MutationObserver((mutations)=>{mutations.forEach((mutation)=>{if(mutation.type==='childList'){}})});observer.observe(observerTarget,{childList:!0,subtree:!0})}}
document.addEventListener('DOMContentLoaded',setupNPKObserver);document.addEventListener('npkStatusUpdated',(event)=>{});function createOrUpdateGaugeCharts(latestMoistValue,latestPHValue,latestTempValue,latestNpkValue,latestNtsValue,latestP205Value,latestk2oValue){moistGauge=updateOrCreateGauge(moistGauge,"moistGauge","Độ ẩm (%)",[35,55],latestMoistValue,0,100,{colors:["#BA0F30","#18A558","#BA0F30"],thresholdLabels:["Insufficient","Adequate","Excess"],unit:'%'});pHGauge=updateOrCreateGauge(pHGauge,"pHGauge","pH",[0,6.80,7,7.20,14],latestPHValue,0,14,{colors:["#BA0F30","#BA0F30","#BA0F30","#18A558","#BA0F30","#BA0F30","#BA0F30"],thresholdLabels:["Very Acidic","Acidic","Slightly Acidic","Neutral","Slightly Alkaline","Alkaline","Very Alkaline"]});tempGauge=updateOrCreateGauge(tempGauge,"tempGauge","Nhiệt độ (°c)",[20,30],latestTempValue,0,50,{colors:["#BA0F30","#18A558","#BA0F30"],thresholdLabels:["Low Temp","Normal Temp","High Temp"],unit:'°c'});if(farmType==="coffee"){const npkMaxValue=200;const npkThresholds=[40,100];const latestNpkRatio=latestNpkValue===null?0:latestNpkValue/300*100;npkGauge=updateOrCreateGauge(npkGauge,"npkGauge","NPK (%)",npkThresholds,latestNpkRatio,0,npkMaxValue,{colors:["#BA0F30","#18A558","#BA0F30"],thresholdLabels:["Insufficient","Adequate","Excess"]})}else if(farmType==="durian"){ntsGauge=updateOrCreateGauge(ntsGauge,"ntsGauge","NTS (%)",[0.1,0.2],latestNtsValue,0,0.3,{colors:["#BA0F30","#18A558","#BA0F30"],thresholdLabels:["Low","Normal","High"],unit:'%'});p205Gauge=updateOrCreateGauge(p205Gauge,"p205Gauge","P2O5 (ppm)",[20,60],latestP205Value,0,100,{colors:["#BA0F30","#18A558","#BA0F30"],thresholdLabels:["Low","Normal","High"],unit:'ppm'});k2oGauge=updateOrCreateGauge(k2oGauge,"k2oGauge","K2O (ppm)",[100,200],latestk2oValue,0,300,{colors:["#BA0F30","#18A558","#BA0F30"],thresholdLabels:["Low","Normal","High"],unit:'ppm'})}}
function updateOrCreateGauge(gauge,canvasId,title,thresholds,value,minValue,maxValue,options){if(gauge){gauge.data.datasets[0].needleValue=value===null?0:value;gauge.options.plugins.gaugeValue=value===null?0:value;gauge.update()}else{gauge=setupGaugeChart(canvasId,title,thresholds,value===null?0:value,minValue,maxValue,options)}
return gauge}
function getTranslatedLabels(key){return currentLang==='vi'?translations.vi[key]:translations.en[key]}
function recreateGaugeCharts(){const npkMaxValue=3;const npkThresholds=[0.5,0.75,1];npkGauge=setupGaugeChart("npkGauge","NPK",npkThresholds,0,0,npkMaxValue,{colors:["#BA0F30","#BA0F30","#18A558","#BA0F30"],thresholdLabels:["Insufficient","Average","Adequate","Excess"]});const ntsThresholds=[0.1,0.2];ntsGauge=setupGaugeChart("ntsGauge","NTS (%)",ntsThresholds,0.15,0,0.3,{colors:["#BA0F30","#18A558","#BA0F30"],thresholdLabels:["Low","Normal","High"],unit:'%'});const p2o5Thresholds=[20,60];p2o5Gauge=setupGaugeChart("p2o5Gauge","P2O5 (ppm)",p2o5Thresholds,40,0,100,{colors:["#BA0F30","#18A558","#BA0F30"],thresholdLabels:["Low","Normal","High"],unit:'ppm'});const k2oThresholds=[100,200];k2oGauge=setupGaugeChart("k2oGauge","K2O (ppm)",k2oThresholds,150,0,300,{colors:["#BA0F30","#18A558","#BA0F30"],thresholdLabels:["Low","Normal","High"],unit:'ppm'});const moistureThresholds=[35,55];moistGauge=setupGaugeChart("moistGauge","Độ ẩm (%)",moistureThresholds,0,0,100,{colors:["#BA0F30","#BA0F30","#18A558","#BA0F30"],thresholdLabels:["Rất khô","Thiếu nước","Đủ ẩm","Thừa nước"],unit:'%'});const pHThresholds=[4,4.5,7,8];pHGauge=setupGaugeChart("pHGauge","pH",pHThresholds,7,0,14,{colors:["#BA0F30","#BA0F30","#BA0F30","#18A558","#BA0F30","#BA0F30","#BA0F30"],thresholdLabels:["Very Acidic","Acidic","Slightly Acidic","Neutral","Slightly Alkaline","Alkaline","Very Alkaline"]});const tempThresholds=[20,30];tempGauge=setupGaugeChart("tempGauge","Nhiệt độ (°c)",tempThresholds,25,0,50,{colors:["#BA0F30","#18A558","#BA0F30"],thresholdLabels:["Low Temp","Normal Temp","High Temp"],unit:'°c'})}
function calculateMinMax(data){const validData=data.filter(value=>value!==null&&!isNaN(value)&&isFinite(value));if(validData.length===0){return{min:"-",max:"-"}}
return{min:Math.min(...validData),max:Math.max(...validData)}}
window.addEventListener('soilDataRequested',function(event){const{cultivateId,inDepth,treeType:eventTreeType}=event.detail;resetCharts();treeType=eventTreeType;farmType=treeType.toLowerCase();toggleFarmTypeElements();axios.post("https://api-router.enfarm.com/api/v3/charts/retrieve-nutrition-chart",{cultivate_id:cultivateId}).then(function(response){const responseContent=response.data.content;let data;if(responseContent.length===1){data=responseContent[0].values}else if(responseContent.length>inDepth){data=responseContent[inDepth].values}else{console.log(`No data found for cultivateId: ${cultivateId} and inDepth: ${inDepth}`);return}
const sortedDates=data.created_at.slice().sort((a,b)=>new Date(a)-new Date(b));const sortedIndices=sortedDates.map((date)=>data.created_at.indexOf(date));let sortedNpkValues=[];let sortedNtsValues=[];let sortedP205Values=[];let sortedk2oValues=[];const sortedMoistValues=sortedIndices.map((index)=>data.moist[index]);const sortedPHValues=sortedIndices.map((index)=>data.pH[index]);const sortedTValues=sortedIndices.map((index)=>data.t[index]);if(data.npk){sortedNpkValues=sortedIndices.map((index)=>data.npk[index])}
if(data.nts&&data.p2o5&&data.k2o){sortedNtsValues=sortedIndices.map((index)=>data.nts[index]);sortedP205Values=sortedIndices.map((index)=>data.p2o5[index]);sortedk2oValues=sortedIndices.map((index)=>data.k2o[index])}
function createGradient(ctx,startColor,endColor){const gradient=ctx.createLinearGradient(0,0,0,ctx.canvas.height);gradient.addColorStop(0,startColor);gradient.addColorStop(1,endColor);return gradient}
if(farmType==="coffee"){if(sortedNpkValues.length>0){const npkCtx=document.getElementById("npkChart").getContext("2d");const npkGradient=createGradient(npkCtx,"rgba(255, 99, 132, 0.8)","rgba(255, 255, 255, 0)");const{min:npkMin,max:npkMax}=calculateMinMax(sortedNpkValues);let npkMinMaxContainer=document.getElementById('npkMinMax');if(!npkMinMaxContainer){npkMinMaxContainer=document.createElement('div');npkMinMaxContainer.id='npkMinMax';npkMinMaxContainer.style.textAlign='right';npkMinMaxContainer.style.marginBottom='5px';npkMinMaxContainer.style.fontSize='12px';const npkChartCanvas=document.getElementById('npkChart');npkChartCanvas.parentNode.insertBefore(npkMinMaxContainer,npkChartCanvas)}
npkMinMaxContainer.innerHTML=`
                    <span style="color: rgba(255, 99, 132, 1);">
                        <span class="material-symbols-outlined" style="color: #8B0000; font-size: 12px; vertical-align: middle;">arrow_drop_down</span>
                        <span data-translate="Min">${getTranslatedText("Min")}</span>: ${npkMin === "-" ? "-" : npkMin.toFixed(2)} 
                        <span class="material-symbols-outlined" style="color: #006400; font-size: 12px; vertical-align: middle;">arrow_drop_up</span>
                        <span data-translate="Max">${getTranslatedText("Max")}</span>: ${npkMax === "-" ? "-" : npkMax.toFixed(2)}
                    </span>
                `;if(npkChart){npkChart.data.labels=sortedDates;npkChart.data.datasets[0].data=sortedNpkValues;npkChart.update()}else{npkChart=new Chart(npkCtx,{type:"line",data:{labels:sortedDates,datasets:[{label:"NPK",data:sortedNpkValues,borderColor:"rgba(255, 99, 132, 1)",backgroundColor:npkGradient,borderWidth:1,fill:!0}]},options:{scales:{yAxes:[{ticks:{beginAtZero:!0}}],xAxes:[{type:"time",time:{minUnit:"day",displayFormats:{day:"MMM D, YYYY"}},ticks:{font:{size:6}}}]},layout:{padding:{top:0}}},})}
const latestNpkValue=sortedNpkValues[sortedNpkValues.length-1];const previousNpkValue=sortedNpkValues[sortedNpkValues.length-2];const nutrientRatio=latestNpkValue===null?0:latestNpkValue/300;let indicatorNPK="";if(latestNpkValue>previousNpkValue){indicatorNPK='<span class="material-symbols-outlined" style="color: green; font-size: 2rem;">arrow_drop_up</span>'}else if(latestNpkValue<previousNpkValue){indicatorNPK='<span class="material-symbols-outlined" style="color: red; font-size: 2rem;">arrow_drop_down</span>'}
let headerContentNPK=`
        <span class="material-symbols-outlined" style="color: rgba(255, 99, 132, 1);">bubble_chart</span>
        &nbsp;
        <span style="color: rgba(255, 99, 132, 1)">
        ${latestNpkValue === null ? '0.00' : latestNpkValue.toFixed(2)} 
        (${nutrientRatio.toFixed(2)})
        </span>
        &nbsp;
        <span style="color: rgba(255, 99, 132, 1); font-size: 8px;" data-translate="latest measure">${getTranslatedText("latest measure")}</span>
    `;if(indicatorNPK!==""){headerContentNPK+=`&nbsp;&nbsp;${indicatorNPK}`}
document.querySelector(".headerNPK .title").innerHTML=headerContentNPK;let npkStatus="";let nutrientIcon="";let nutrientColor="";if(latestNpkValue===null){npkStatus=`<span data-translate="No data">${getTranslatedText("No data")}</span>`;nutrientIcon='<span class="material-symbols-outlined" style="color: white; font-size: 1rem; margin-top: 2px;">info</span>';nutrientColor="#888888"}else{if(nutrientRatio<0.5){npkStatus=`<span data-translate="Insufficient Nutrients">${getTranslatedText("Insufficient Nutrients")}</span>`;nutrientIcon='<span class="material-symbols-outlined" style="color: white; font-size: 1rem; margin-top: 2px;">warning</span>';nutrientColor="#BA0F30"}else if(nutrientRatio<=0.75){npkStatus=`<span data-translate="Average Nutrients">${getTranslatedText("Average Nutrients")}</span>`;nutrientIcon='<span class="material-symbols-outlined" style="color: white; font-size: 1rem; margin-top: 2px;">check</span>';nutrientColor="#18A558"}else if(nutrientRatio<=1){npkStatus=`<span data-translate="Adequate Nutrients">${getTranslatedText("Adequate Nutrients")}</span>`;nutrientIcon='<span class="material-symbols-outlined" style="color: white; font-size: 1rem; margin-top: 2px;">done_all</span>';nutrientColor="#18A558"}else{npkStatus=`<span data-translate="Excess Nutrients">${getTranslatedText("Excess Nutrients")}</span>`;nutrientIcon='<span class="material-symbols-outlined" style="color: white; font-size: 1rem; margin-top: 2px;">warning</span>';nutrientColor="#BA0F30"}}
const nutrientStatusElement=document.querySelector(".nutrient-status")||document.createElement("div");nutrientStatusElement.classList.add("nutrient-status");nutrientStatusElement.style.fontSize="10px";nutrientStatusElement.style.color="white";nutrientStatusElement.style.backgroundColor=nutrientColor;nutrientStatusElement.style.borderRadius="20px";nutrientStatusElement.style.padding="4px 5px";nutrientStatusElement.style.boxShadow="0 2px 4px rgba(0, 0, 0, 0.2)";const nutrientTextSpan=document.createElement("span");nutrientTextSpan.style.display="flex";nutrientTextSpan.style.alignItems="center";nutrientTextSpan.style.marginTop="-1px";nutrientTextSpan.innerHTML=`${nutrientIcon}&nbsp;${npkStatus}`;nutrientStatusElement.innerHTML='';nutrientStatusElement.appendChild(nutrientTextSpan);const headerNPKSection=document.querySelector(".headerNPK");headerNPKSection.appendChild(nutrientStatusElement);const npkRecommendations=getNutrientRecommendation(npkStatus);let npkTooltipContainer=document.getElementById('npk-recommendation-container');if(!npkTooltipContainer){npkTooltipContainer=document.createElement('div');npkTooltipContainer.id='npk-recommendation-container';document.body.appendChild(npkTooltipContainer)}
npkTooltipContainer.innerHTML=`
        <span id="npkreccomendation-tooltip" class="tooltip">
            <span class="material-icons-outlined" style="vertical-align: middle;">lightbulb</span>&nbsp;
            <span class="recommendation-header">${currentLang === 'en' ? 'Recommendations:' : 'Khuyến nghị:'}</span>
            <p>${npkRecommendations[currentLang]}</p>
        </span>
    `}}else if(farmType==="durian"){if(sortedNtsValues.length>0){const ntsCtx=document.getElementById("ntsChart").getContext("2d");const ntsGradient=createGradient(ntsCtx,"rgba(255, 99, 132, 0.8)","rgba(255, 99, 132, 0)");const{min:ntsMin,max:ntsMax}=calculateMinMax(sortedNtsValues);let ntsMinMaxContainer=document.getElementById('ntsMinMax');if(!ntsMinMaxContainer){ntsMinMaxContainer=document.createElement('div');ntsMinMaxContainer.id='ntsMinMax';ntsMinMaxContainer.style.textAlign='right';ntsMinMaxContainer.style.marginBottom='5px';ntsMinMaxContainer.style.fontSize='12px';const ntsChartCanvas=document.getElementById('ntsChart');ntsChartCanvas.parentNode.insertBefore(ntsMinMaxContainer,ntsChartCanvas)}
ntsMinMaxContainer.innerHTML=`
                    <span style="color: rgba(255, 99, 132, 1);">
                        <span class="material-symbols-outlined" style="color: #8B0000; font-size: 12px; vertical-align: middle;">arrow_drop_down</span>
                        <span data-translate="Min">${getTranslatedText("Min")}</span>: ${ntsMin === "-" ? "-" : ntsMin.toFixed(2) + "%"} 
                        <span class="material-symbols-outlined" style="color: #006400; font-size: 12px; vertical-align: middle;">arrow_drop_up</span>
                        <span data-translate="Max">${getTranslatedText("Max")}</span>: ${ntsMax === "-" ? "-" : ntsMax.toFixed(2) + "%"}
                    </span>
                `;const ntsLabel=currentLang==='vi'?"NTS (%)":"NTS (%)";if(ntsChart){ntsChart.data.labels=sortedDates;ntsChart.data.datasets[0].data=sortedNtsValues;ntsChart.update()}else{ntsChart=new Chart(ntsCtx,{type:"line",data:{labels:sortedDates,datasets:[{label:ntsLabel,data:sortedNtsValues,borderColor:"rgba(255, 99, 132, 1)",backgroundColor:ntsGradient,borderWidth:1,fill:!0}]},options:{scales:{yAxes:[{display:!1,ticks:{font:{size:6}}}]},layout:{padding:{top:0}}},})}
const latestNtsValue=sortedNtsValues[sortedNtsValues.length-1];const previousNtsValue=sortedNtsValues[sortedNtsValues.length-2];let indicatorNts="";if(latestNtsValue>previousNtsValue){indicatorNts='<span class="material-symbols-outlined" style="color: green; font-size: 2rem;">arrow_drop_up</span>'}else if(latestNtsValue<previousNtsValue){indicatorNts='<span class="material-symbols-outlined" style="color: red; font-size: 2rem;">arrow_drop_down</span>'}
let headerContentNts=`
    <span class="material-symbols-outlined" style="color: rgba(255, 99, 132, 1);">bubble_chart</span>
    &nbsp;
    <span style="color: rgba(255, 99, 132, 1)">${latestNtsValue !== null ? latestNtsValue.toFixed(2) : 'N/A'}</span>
    &nbsp;
    <span style="color: rgba(255, 99, 132, 1); font-size: 8px;" data-translate="latest measure">${getTranslatedText("latest measure")}</span>
    `;if(indicatorNts!==""){headerContentNts+=`&nbsp;&nbsp;${indicatorNts}`}
document.querySelector(".headerNTS .title").innerHTML=headerContentNts;let ntsStatus="";let ntsIcon="";let ntsColor="";if(latestNtsValue===null){ntsStatus=`<span data-translate="No data">${getTranslatedText("No data")}</span>`;ntsIcon='<span class="material-symbols-outlined" style="color: white; font-size: 1rem; margin-top: 2px;">info</span>';ntsColor="#888888"}else{if(latestNtsValue>=0.1&&latestNtsValue<=0.2){ntsStatus=`<span data-translate="Average NTS">${getTranslatedText("Average NTS")}</span>`;ntsIcon='<span class="material-symbols-outlined" style="color: white; font-size: 1rem; margin-top: 2px;">done_all</span>';ntsColor="#18A558"}else if(latestNtsValue<0.1){ntsStatus=`<span data-translate="Very Low NTS">${getTranslatedText("Very Low NTS")}</span>`;ntsIcon='<span class="material-symbols-outlined" style="color: white; font-size: 1rem; margin-top: 2px;">warning</span>';ntsColor="#BA0F30"}else{ntsStatus=`<span data-translate="High NTS">${getTranslatedText("High NTS")}</span>`;ntsIcon='<span class="material-symbols-outlined" style="color: white; font-size: 1rem; margin-top: 2px;">warning</span>';ntsColor="#BA0F30"}}
let ntsStatusElement=document.querySelector(".nts-status");if(!ntsStatusElement){ntsStatusElement=document.createElement("div");ntsStatusElement.classList.add("nts-status")}
ntsStatusElement.style.fontSize="10px";ntsStatusElement.style.color="white";ntsStatusElement.style.backgroundColor=ntsColor;ntsStatusElement.style.borderRadius="20px";ntsStatusElement.style.padding="4px 5px";ntsStatusElement.style.boxShadow="0 2px 4px rgba(0, 0, 0, 0.2)";const ntsTextSpan=document.createElement("span");ntsTextSpan.style.display="flex";ntsTextSpan.style.alignItems="center";ntsTextSpan.style.marginTop="-1px";ntsTextSpan.innerHTML=`${ntsIcon}&nbsp;${ntsStatus}`;ntsStatusElement.innerHTML='';ntsStatusElement.appendChild(ntsTextSpan);const headerNtsSection=document.querySelector(".headerNTS");headerNtsSection.appendChild(ntsStatusElement);const ntsRecommendations=getNtsRecommendation(ntsStatus);let ntsTooltipContainer=document.getElementById('nts-recommendation-container');if(!ntsTooltipContainer){ntsTooltipContainer=document.createElement('div');ntsTooltipContainer.id='nts-recommendation-container';document.body.appendChild(ntsTooltipContainer)}
ntsTooltipContainer.innerHTML=`
    <span id="ntsrecommendation-tooltip" class="tooltip">
        <span class="material-icons-outlined" style="vertical-align: middle;">lightbulb</span>&nbsp;
        <span class="recommendation-header">${currentLang === 'en' ? 'Recommendations:' : 'Khuyến nghị:'}</span>
        <p>${ntsRecommendations[currentLang]}</p>
    </span>
    `;updateNtsStatus()}
if(sortedP205Values.length>0){const p205Ctx=document.getElementById("p205Chart").getContext("2d");const p205Gradient=createGradient(p205Ctx,"rgba(75, 192, 192, 0.8)","rgba(75, 192, 192, 0)");const{min:p205Min,max:p205Max}=calculateMinMax(sortedP205Values);let p205MinMaxContainer=document.getElementById('p205MinMax');if(!p205MinMaxContainer){p205MinMaxContainer=document.createElement('div');p205MinMaxContainer.id='p205MinMax';p205MinMaxContainer.style.textAlign='right';p205MinMaxContainer.style.marginBottom='5px';p205MinMaxContainer.style.fontSize='12px';const p205ChartCanvas=document.getElementById('p205Chart');p205ChartCanvas.parentNode.insertBefore(p205MinMaxContainer,p205ChartCanvas)}
p205MinMaxContainer.innerHTML=`
                    <span style="color: rgba(75, 192, 192, 1);">
                        <span class="material-symbols-outlined" style="color: #8B0000; font-size: 12px; vertical-align: middle;">arrow_drop_down</span>
                        <span data-translate="Min">${getTranslatedText("Min")}</span>: ${p205Min === "-" ? "-" : p205Min.toFixed(2) + " ppm"} 
                        <span class="material-symbols-outlined" style="color: #006400; font-size: 12px; vertical-align: middle;">arrow_drop_up</span>
                        <span data-translate="Max">${getTranslatedText("Max")}</span>: ${p205Max === "-" ? "-" : p205Max.toFixed(2) + " ppm"}
                    </span>
                `;const p205Label=currentLang==='vi'?"P2O5 (ppm)":"P2O5 (ppm)";if(p205Chart){p205Chart.data.labels=sortedDates;p205Chart.data.datasets[0].data=sortedP205Values;p205Chart.update()}else{p205Chart=new Chart(p205Ctx,{type:"line",data:{labels:sortedDates,datasets:[{label:p205Label,data:sortedP205Values,borderColor:"rgba(75, 192, 192, 1)",backgroundColor:p205Gradient,borderWidth:1,fill:!0}]},options:{scales:{yAxes:[{display:!1,ticks:{font:{size:6}}}]},layout:{padding:{top:0}}},})}
const latestP205Value=sortedP205Values[sortedP205Values.length-1];const previousP205Value=sortedP205Values[sortedP205Values.length-2];let indicatorP205="";if(latestP205Value>previousP205Value){indicatorP205='<span class="material-symbols-outlined" style="color: green; font-size: 2rem;">arrow_drop_up</span>'}else if(latestP205Value<previousP205Value){indicatorP205='<span class="material-symbols-outlined" style="color: red; font-size: 2rem;">arrow_drop_down</span>'}
let headerContentP205=`
    <span class="material-symbols-outlined" style="color: rgba(75, 192, 192, 1);">bubble_chart</span>
    &nbsp;
    <span style="color: rgba(75, 192, 192, 1)">${latestP205Value !== null ? latestP205Value.toFixed(2) : 'N/A'}</span>
    &nbsp;
    <span style="color: rgba(75, 192, 192, 1); font-size: 8px;" data-translate="latest measure">${getTranslatedText("latest measure")}</span>
    `;if(indicatorP205!==""){headerContentP205+=`&nbsp;&nbsp;${indicatorP205}`}
document.querySelector(".headerP205 .title").innerHTML=headerContentP205;let p205Status="";let p205Icon="";let p205Color="";if(latestP205Value===null){p205Status=`<span data-translate="No data">${getTranslatedText("No data")}</span>`;p205Icon='<span class="material-symbols-outlined" style="color: white; font-size: 1rem; margin-top: 2px;">info</span>';p205Color="#888888"}else{if(latestP205Value>=20&&latestP205Value<=60){p205Status=`<span data-translate="Average P2O5">${getTranslatedText("Average P2O5")}</span>`;p205Icon='<span class="material-symbols-outlined" style="color: white; font-size: 1rem; margin-top: 2px;">done_all</span>';p205Color="#18A558"}else if(latestP205Value<20){p205Status=`<span data-translate="Very Low P2O5">${getTranslatedText("Very Low P2O5")}</span>`;p205Icon='<span class="material-symbols-outlined" style="color: white; font-size: 1rem; margin-top: 2px;">warning</span>';p205Color="#BA0F30"}else{p205Status=`<span data-translate="High P2O5">${getTranslatedText("High P2O5")}</span>`;p205Icon='<span class="material-symbols-outlined" style="color: white; font-size: 1rem; margin-top: 2px;">warning</span>';p205Color="#BA0F30"}}
let p205StatusElement=document.querySelector(".p205-status");if(!p205StatusElement){p205StatusElement=document.createElement("div");p205StatusElement.classList.add("p205-status")}
p205StatusElement.style.fontSize="10px";p205StatusElement.style.color="white";p205StatusElement.style.backgroundColor=p205Color;p205StatusElement.style.borderRadius="20px";p205StatusElement.style.padding="4px 5px";p205StatusElement.style.boxShadow="0 2px 4px rgba(0, 0, 0, 0.2)";const p205TextSpan=document.createElement("span");p205TextSpan.style.display="flex";p205TextSpan.style.alignItems="center";p205TextSpan.style.marginTop="-1px";p205TextSpan.innerHTML=`${p205Icon}&nbsp;${p205Status}`;p205StatusElement.innerHTML='';p205StatusElement.appendChild(p205TextSpan);const headerP205Section=document.querySelector(".headerP205");headerP205Section.appendChild(p205StatusElement);const p205Recommendations=getP205Recommendation(p205Status);let p205TooltipContainer=document.getElementById('p205-recommendation-container');if(!p205TooltipContainer){p205TooltipContainer=document.createElement('div');p205TooltipContainer.id='p205-recommendation-container';document.body.appendChild(p205TooltipContainer)}
p205TooltipContainer.innerHTML=`
    <span id="p205recommendation-tooltip" class="tooltip">
        <span class="material-icons-outlined" style="vertical-align: middle;">lightbulb</span>&nbsp;
        <span class="recommendation-header">${currentLang === 'en' ? 'Recommendations:' : 'Khuyến nghị:'}</span>
        <p>${p205Recommendations[currentLang]}</p>
    </span>
    `;updateP205Status()}
if(sortedk2oValues.length>0){const k2oCtx=document.getElementById("k2oChart").getContext("2d");const k2oGradient=createGradient(k2oCtx,"rgba(153, 102, 255, 0.8)","rgba(153, 102, 255, 0)");const{min:k2oMin,max:k2oMax}=calculateMinMax(sortedk2oValues);let k2oMinMaxContainer=document.getElementById('k2oMinMax');if(!k2oMinMaxContainer){k2oMinMaxContainer=document.createElement('div');k2oMinMaxContainer.id='k2oMinMax';k2oMinMaxContainer.style.textAlign='right';k2oMinMaxContainer.style.marginBottom='5px';k2oMinMaxContainer.style.fontSize='12px';const k2oChartCanvas=document.getElementById('k2oChart');k2oChartCanvas.parentNode.insertBefore(k2oMinMaxContainer,k2oChartCanvas)}
k2oMinMaxContainer.innerHTML=`
                    <span style="color: rgba(153, 102, 255, 1);">
                        <span class="material-symbols-outlined" style="color: #8B0000; font-size: 12px; vertical-align: middle;">arrow_drop_down</span>
                        <span data-translate="Min">${getTranslatedText("Min")}</span>: ${k2oMin === "-" ? "-" : k2oMin.toFixed(2) + " ppm"} 
                        <span class="material-symbols-outlined" style="color: #006400; font-size: 12px; vertical-align: middle;">arrow_drop_up</span>
                        <span data-translate="Max">${getTranslatedText("Max")}</span>: ${k2oMax === "-" ? "-" : k2oMax.toFixed(2) + " ppm"}
                    </span>
                `;const k2oLabel=currentLang==='vi'?"K2O (ppm)":"K2O (ppm)";if(k2oChart){k2oChart.data.labels=sortedDates;k2oChart.data.datasets[0].data=sortedk2oValues;k2oChart.update()}else{k2oChart=new Chart(k2oCtx,{type:"line",data:{labels:sortedDates,datasets:[{label:k2oLabel,data:sortedk2oValues,borderColor:"rgba(153, 102, 255, 1)",backgroundColor:k2oGradient,borderWidth:1,fill:!0}]},options:{scales:{yAxes:[{display:!1,ticks:{font:{size:6}}}]},layout:{padding:{top:0}}},})}
const latestk2oValue=sortedk2oValues[sortedk2oValues.length-1];const previousk2oValue=sortedk2oValues[sortedk2oValues.length-2];let indicatork2o="";if(latestk2oValue>previousk2oValue){indicatork2o='<span class="material-symbols-outlined" style="color: green; font-size: 2rem;">arrow_drop_up</span>'}else if(latestk2oValue<previousk2oValue){indicatork2o='<span class="material-symbols-outlined" style="color: red; font-size: 2rem;">arrow_drop_down</span>'}
let headerContentk2o=`
    <span class="material-symbols-outlined" style="color: rgba(153, 102, 255, 1);">bubble_chart</span>
    &nbsp;
    <span style="color: rgba(153, 102, 255, 1)">${latestk2oValue !== null ? latestk2oValue.toFixed(2) : 'N/A'}</span>
    &nbsp;
    <span style="color: rgba(153, 102, 255, 1); font-size: 8px;" data-translate="latest measure">${getTranslatedText("latest measure")}</span>
    `;if(indicatork2o!==""){headerContentk2o+=`&nbsp;&nbsp;${indicatork2o}`}
document.querySelector(".headerk2o .title").innerHTML=headerContentk2o;let k2oStatus="";let k2oIcon="";let k2oColor="";if(latestk2oValue===null){k2oStatus=`<span data-translate="No data">${getTranslatedText("No data")}</span>`;k2oIcon='<span class="material-symbols-outlined" style="color: white; font-size: 1rem; margin-top: 2px;">info</span>';k2oColor="#888888"}else{if(latestk2oValue>=100&&latestk2oValue<=200){k2oStatus=`<span data-translate="Average K2O">${getTranslatedText("Average K2O")}</span>`;k2oIcon='<span class="material-symbols-outlined" style="color: white; font-size: 1rem; margin-top: 2px;">done_all</span>';k2oColor="#18A558"}else if(latestk2oValue<100){k2oStatus=`<span data-translate="Very Low K2O">${getTranslatedText("Very Low K2O")}</span>`;k2oIcon='<span class="material-symbols-outlined" style="color: white; font-size: 1rem; margin-top: 2px;">warning</span>';k2oColor="#BA0F30"}else{k2oStatus=`<span data-translate="High K2O">${getTranslatedText("High K2O")}</span>`;k2oIcon='<span class="material-symbols-outlined" style="color: white; font-size: 1rem; margin-top: 2px;">warning</span>';k2oColor="#BA0F30"}}
let k2oStatusElement=document.querySelector(".k2o-status");if(!k2oStatusElement){k2oStatusElement=document.createElement("div");k2oStatusElement.classList.add("k2o-status")}
k2oStatusElement.style.fontSize="10px";k2oStatusElement.style.color="white";k2oStatusElement.style.backgroundColor=k2oColor;k2oStatusElement.style.borderRadius="20px";k2oStatusElement.style.padding="4px 5px";k2oStatusElement.style.boxShadow="0 2px 4px rgba(0, 0, 0, 0.2)";const k2oTextSpan=document.createElement("span");k2oTextSpan.style.display="flex";k2oTextSpan.style.alignItems="center";k2oTextSpan.style.marginTop="-1px";k2oTextSpan.innerHTML=`${k2oIcon}&nbsp;${k2oStatus}`;k2oStatusElement.innerHTML='';k2oStatusElement.appendChild(k2oTextSpan);const headerk2oSection=document.querySelector(".headerk2o");headerk2oSection.appendChild(k2oStatusElement);const k2oRecommendations=getk2oRecommendation(k2oStatus);let k2oTooltipContainer=document.getElementById('k2o-recommendation-container');if(!k2oTooltipContainer){k2oTooltipContainer=document.createElement('div');k2oTooltipContainer.id='k2o-recommendation-container';document.body.appendChild(k2oTooltipContainer)}
k2oTooltipContainer.innerHTML=`
    <span id="k2orecommendation-tooltip" class="tooltip">
        <span class="material-icons-outlined" style="vertical-align: middle;">lightbulb</span>&nbsp;
        <span class="recommendation-header">${currentLang === 'en' ? 'Recommendations:' : 'Khuyến nghị:'}</span>
        <p>${k2oRecommendations[currentLang]}</p>
    </span>
    `;updatek2oStatus()}}
if(sortedMoistValues.length>0){const moistCtx=document.getElementById("moistChart").getContext("2d");const moistGradient=createGradient(moistCtx,"rgba(54, 162, 235, 0.8)","rgba(54, 162, 235, 0)");const{min:moistMin,max:moistMax}=calculateMinMax(sortedMoistValues);let moistMinMaxContainer=document.getElementById('moistMinMax');if(!moistMinMaxContainer){moistMinMaxContainer=document.createElement('div');moistMinMaxContainer.id='moistMinMax';moistMinMaxContainer.style.textAlign='right';moistMinMaxContainer.style.marginBottom='5px';moistMinMaxContainer.style.fontSize='12px';const moistChartCanvas=document.getElementById('moistChart');moistChartCanvas.parentNode.insertBefore(moistMinMaxContainer,moistChartCanvas)}
moistMinMaxContainer.innerHTML=`
                <span style="color: rgba(54, 162, 235, 1);">
                    <span class="material-symbols-outlined" style="color: #8B0000; font-size: 12px; vertical-align: middle;">arrow_drop_down</span>
                    <span data-translate="Min">${getTranslatedText("Min")}</span>: ${moistMin === "-" ? "-" : moistMin.toFixed(2) + "%"} 
                    <span class="material-symbols-outlined" style="color: #006400; font-size: 12px; vertical-align: middle;">arrow_drop_up</span>
                    <span data-translate="Max">${getTranslatedText("Max")}</span>: ${moistMax === "-" ? "-" : moistMax.toFixed(2) + "%"}
                </span>
            `;const moistureLabel=currentLang==='vi'?"Độ ẩm (%)":"Moisture (%)";if(moistChart){moistChart.data.labels=sortedDates;moistChart.data.datasets[0].data=sortedMoistValues;moistChart.update()}else{moistChart=new Chart(moistCtx,{type:"line",data:{labels:sortedDates,datasets:[{label:moistureLabel,data:sortedMoistValues,borderColor:"rgba(54, 162, 235, 1)",backgroundColor:moistGradient,borderWidth:1,fill:!0}]},options:{scales:{yAxes:[{ticks:{beginAtZero:!0}}],xAxes:[{type:"time",time:{minUnit:"day",displayFormats:{day:"MMM D, YYYY"}},ticks:{font:{size:6}}}]},layout:{padding:{top:0}}},})}
const latestMoistValue=sortedMoistValues[sortedMoistValues.length-1];const previousMoistValue=sortedMoistValues[sortedMoistValues.length-2];let indicatorMoist="";if(latestMoistValue>previousMoistValue){indicatorMoist='<span class="material-symbols-outlined" style="color: green; font-size: 2rem;">arrow_drop_up</span>'}else if(latestMoistValue<previousMoistValue){indicatorMoist='<span class="material-symbols-outlined" style="color: red; font-size: 2rem;">arrow_drop_down</span>'}
let moistureStatus="";let moistureIcon="";let moistureColor="";if(latestMoistValue===null){moistureStatus=`<span data-translate="No data">${getTranslatedText("No data")}</span>`;moistureIcon='<span class="material-symbols-outlined" style="color: white; font-size: 1rem; margin-top: 2px;">info</span>';moistureColor="#888888"}else{if(latestMoistValue<22.5){moistureStatus=`<span data-translate="Very dry">${getTranslatedText("Very dry")}</span>`;moistureIcon='<span class="material-symbols-outlined" style="color: white; font-size: 1rem; margin-top: 2px;">warning</span>';moistureColor="#BA0F30"}else if(latestMoistValue<=35){moistureStatus=`<span data-translate="Lack of water">${getTranslatedText("Lack of water")}</span>`;moistureIcon='<span class="material-symbols-outlined" style="color: white; font-size: 1rem; margin-top: 2px;">warning</span>';moistureColor="#BA0F30"}else if(latestMoistValue<=55){moistureStatus=`<span data-translate="Enough moisture">${getTranslatedText("Enough moisture")}</span>`;moistureIcon='<span class="material-symbols-outlined" style="color: white; font-size: 1rem; margin-top: 2px;">done_all</span>';moistureColor="#18A558"}else{moistureStatus=`<span data-translate="Excess water">${getTranslatedText("Excess water")}</span>`;moistureIcon='<span class="material-symbols-outlined" style="color: white; font-size: 1rem; margin-top: 2px;">warning</span>';moistureColor="#BA0F30"}}
let moistureTooltipContainer=document.getElementById('moisture-recommendation-container');if(!moistureTooltipContainer){moistureTooltipContainer=document.createElement('div');moistureTooltipContainer.id='moisture-recommendation-container';document.body.appendChild(moistureTooltipContainer)}
const moistureRecommendations=getMoistureRecommendation(moistureStatus);moistureTooltipContainer.innerHTML=`
        <span id="moisturerecommendation-tooltip" class="tooltip">
            <span class="material-icons-outlined" style="vertical-align: middle;">lightbulb</span>&nbsp;
            <span class="recommendation-header">${currentLang === 'en' ? 'Recommendations:' : 'Khuyến nghị:'}</span>
            <p>${moistureRecommendations[currentLang]}</p>
        </span>
    `;let moistureStatusElement=document.querySelector(".moisture-status");if(!moistureStatusElement){moistureStatusElement=document.createElement("div");moistureStatusElement.classList.add("moisture-status")}
moistureStatusElement.style.fontSize="10px";moistureStatusElement.style.color="white";moistureStatusElement.style.backgroundColor=moistureColor;moistureStatusElement.style.borderRadius="20px";moistureStatusElement.style.padding="4px 5px";moistureStatusElement.style.boxShadow="0 2px 4px rgba(0, 0, 0, 0.2)";const moistureTextSpan=document.createElement("span");moistureTextSpan.style.display="flex";moistureTextSpan.style.alignItems="center";moistureTextSpan.style.marginTop="-1px";moistureTextSpan.innerHTML=`${moistureIcon}&nbsp;${moistureStatus}`;moistureStatusElement.innerHTML='';moistureStatusElement.appendChild(moistureTextSpan);const headerMoistSection=document.querySelector(".headerMoist");headerMoistSection.appendChild(moistureStatusElement);let headerContentMoist=`
        <span class="material-symbols-outlined" style="color: rgba(54, 162, 235, 1);">humidity_mid</span>
        &nbsp;
        <span style="color: rgba(54, 162, 235, 1)">${latestMoistValue !== null ? latestMoistValue.toFixed(2) : 'N/A'}</span>
        &nbsp;
        <span style="color: rgba(54, 162, 235, 1); font-size: 8px;" data-translate="latest measure">${getTranslatedText("latest measure")}</span>
    `;if(indicatorMoist!==""){headerContentMoist+=`&nbsp;&nbsp;${indicatorMoist}`}
document.querySelector(".headerMoist .title").innerHTML=headerContentMoist;updateMoistureStatus()}
if(sortedPHValues.length>0){const pHCtx=document.getElementById("phChart").getContext("2d");const pHGradient=createGradient(pHCtx,"rgba(75, 192, 192, 0.8)","rgba(75, 192, 192, 0)");const{min:pHMin,max:pHMax}=calculateMinMax(sortedPHValues);let pHMinMaxContainer=document.getElementById('pHMinMax');if(!pHMinMaxContainer){pHMinMaxContainer=document.createElement('div');pHMinMaxContainer.id='pHMinMax';pHMinMaxContainer.style.textAlign='right';pHMinMaxContainer.style.marginBottom='5px';pHMinMaxContainer.style.fontSize='12px';const pHChartCanvas=document.getElementById('phChart');pHChartCanvas.parentNode.insertBefore(pHMinMaxContainer,pHChartCanvas)}
pHMinMaxContainer.innerHTML=`
                <span style="color: rgba(75, 192, 192, 1);">
                    <span class="material-symbols-outlined" style="color: #8B0000; font-size: 12px; vertical-align: middle;">arrow_drop_down</span>
                    <span data-translate="Min">${getTranslatedText("Min")}</span>: ${pHMin === "-" ? "-" : pHMin.toFixed(2) + "pH"} 
                    <span class="material-symbols-outlined" style="color: #006400; font-size: 12px; vertical-align: middle;">arrow_drop_up</span>
                    <span data-translate="Max">${getTranslatedText("Max")}</span>: ${pHMax === "-" ? "-" : pHMax.toFixed(2) + "pH"}
                </span>
            `;if(pHChart){pHChart.data.labels=sortedDates;pHChart.data.datasets[0].data=sortedPHValues;pHChart.update()}else{pHChart=new Chart(pHCtx,{type:"line",data:{labels:sortedDates,datasets:[{label:"pH",data:sortedPHValues,borderColor:"rgba(75, 192, 192, 1)",backgroundColor:pHGradient,borderWidth:1,fill:!0}]},options:{scales:{yAxes:[{ticks:{beginAtZero:!0}}],xAxes:[{type:"time",time:{minUnit:"day",displayFormats:{day:"MMM D, YYYY"}},ticks:{font:{size:6}}}]},layout:{padding:{top:0}}},})}
const latestPHValue=sortedPHValues[sortedPHValues.length-1];const previousPHValue=sortedPHValues[sortedPHValues.length-2];let indicatorPH="";if(latestPHValue>previousPHValue){indicatorPH='<span class="material-symbols-outlined" style="color: green; font-size: 2rem;">arrow_drop_up</span>'}else if(latestPHValue<previousPHValue){indicatorPH='<span class="material-symbols-outlined" style="color: red; font-size: 2rem;">arrow_drop_down</span>'}
let headerContentPH=`
        <span class="material-symbols-outlined" style="color: rgba(75, 192, 192, 1);">water_ph</span>
        &nbsp;
        <span style="color: rgba(75, 192, 192, 1)">${latestPHValue !== null ? latestPHValue.toFixed(2) : 'N/A'}</span>
        &nbsp;
        <span style="color: rgba(75, 192, 192, 1); font-size: 8px;" data-translate="latest measure">${getTranslatedText("latest measure")}</span>
    `;if(indicatorPH!==""){headerContentPH+=`&nbsp;&nbsp;${indicatorPH}`}
document.querySelector(".headerpH .title").innerHTML=headerContentPH;let pHStatus="";let pHIcon="";let pHColor="";if(latestPHValue===null){pHStatus=`<span data-translate="No data">${getTranslatedText("No data")}</span>`;pHIcon='<span class="material-symbols-outlined" style="color: white; font-size: 1rem; margin-top: 2px;">info</span>';pHColor="#888888"}else{if(latestPHValue===7){pHStatus=`<span data-translate="Neutral">${getTranslatedText("Neutral")}</span>`;pHIcon='<span class="material-symbols-outlined" style="color: white; font-size: 1rem; margin-top: 2px;">done_all</span>';pHColor="#18A558"}else if(latestPHValue<4){pHStatus=`<span data-translate="Very Acidic">${getTranslatedText("Very Acidic")}</span>`;pHIcon='<span class="material-symbols-outlined" style="color: white; font-size: 1rem; margin-top: 2px;">warning</span>';pHColor="#BA0F30"}else if(latestPHValue>=4&&latestPHValue<=4.5){pHStatus=`<span data-translate="Acidic">${getTranslatedText("Acidic")}</span>`;pHIcon='<span class="material-symbols-outlined" style="color: white; font-size: 1rem; margin-top: 2px;">warning</span>';pHColor="#BA0F30"}else if(latestPHValue>4.5&&latestPHValue<7){pHStatus=`<span data-translate="Slightly Acidic">${getTranslatedText("Slightly Acidic")}</span>`;pHIcon='<span class="material-symbols-outlined" style="color: white; font-size: 1rem; margin-top: 2px;">warning</span>';pHColor="#BA0F30"}else if(latestPHValue>7&&latestPHValue<8){pHStatus=`<span data-translate="Slightly Alkaline">${getTranslatedText("Slightly Alkaline")}</span>`;pHIcon='<span class="material-symbols-outlined" style="color: white; font-size: 1rem; margin-top: 2px;">warning</span>';pHColor="#BA0F30"}else if(latestPHValue===8){pHStatus=`<span data-translate="Alkaline">${getTranslatedText("Alkaline")}</span>`;pHIcon='<span class="material-symbols-outlined" style="color: white; font-size: 1rem; margin-top: 2px;">warning</span>';pHColor="#BA0F30"}else if(latestPHValue>8){pHStatus=`<span data-translate="Very Alkaline">${getTranslatedText("Very Alkaline")}</span>`;pHIcon='<span class="material-symbols-outlined" style="color: white; font-size: 1rem; margin-top: 2px;">warning</span>';pHColor="#BA0F30"}}
let pHTooltipContainer=document.getElementById('ph-recommendation-container');if(!pHTooltipContainer){pHTooltipContainer=document.createElement('div');pHTooltipContainer.id='ph-recommendation-container';document.body.appendChild(pHTooltipContainer)}
const pHRecommendations=getPHRecommendation(pHStatus);pHTooltipContainer.innerHTML=`
        <span id="phrecommendation-tooltip" class="tooltip">
            <span class="material-icons-outlined" style="vertical-align: middle;">lightbulb</span>&nbsp;
            <span class="recommendation-header">${currentLang === 'en' ? 'Recommendations:' : 'Khuyến nghị:'}</span>
            <p>${pHRecommendations[currentLang]}</p>
        </span>
    `;let pHStatusElement=document.querySelector(".ph-status");if(!pHStatusElement){pHStatusElement=document.createElement("div");pHStatusElement.classList.add("ph-status")}
pHStatusElement.style.fontSize="10px";pHStatusElement.style.color="white";pHStatusElement.style.backgroundColor=pHColor;pHStatusElement.style.borderRadius="20px";pHStatusElement.style.padding="4px 5px";pHStatusElement.style.boxShadow="0 2px 4px rgba(0, 0, 0, 0.2)";const pHTextSpan=document.createElement("span");pHTextSpan.style.display="flex";pHTextSpan.style.alignItems="center";pHTextSpan.style.marginTop="-1px";pHTextSpan.innerHTML=`${pHIcon}&nbsp;${pHStatus}`;pHStatusElement.innerHTML='';pHStatusElement.appendChild(pHTextSpan);const headerPHSection=document.querySelector(".headerpH");headerPHSection.appendChild(pHStatusElement);updatePHStatus()}
if(sortedTValues.length>0){const tCtx=document.getElementById("tempChart").getContext("2d");const tGradient=createGradient(tCtx,"rgba(255, 159, 64, 0.8)","rgba(255, 159, 64, 0)");const{min:tempMin,max:tempMax}=calculateMinMax(sortedTValues);let tempMinMaxContainer=document.getElementById('tempMinMax');if(!tempMinMaxContainer){tempMinMaxContainer=document.createElement('div');tempMinMaxContainer.id='tempMinMax';tempMinMaxContainer.style.textAlign='right';tempMinMaxContainer.style.marginBottom='5px';tempMinMaxContainer.style.fontSize='12px';const tempChartCanvas=document.getElementById('tempChart');tempChartCanvas.parentNode.insertBefore(tempMinMaxContainer,tempChartCanvas)}
tempMinMaxContainer.innerHTML=`
                <span style="color: rgba(255, 159, 64, 1);">
                    <span class="material-symbols-outlined" style="color: #8B0000; font-size: 12px; vertical-align: middle;">arrow_drop_down</span>
                    <span data-translate="Min">${getTranslatedText("Min")}</span>: ${tempMin === "-" ? "-" : tempMin.toFixed(2) + "°c"} 
                    <span class="material-symbols-outlined" style="color: #006400; font-size: 12px; vertical-align: middle;">arrow_drop_up</span>
                    <span data-translate="Max">${getTranslatedText("Max")}</span>: ${tempMax === "-" ? "-" : tempMax.toFixed(2) + "°c"}
                </span>
            `;const temperatureLabel=currentLang==='vi'?"Nhiệt độ (°c)":"Temperature (°c)";if(tempChart){tempChart.data.labels=sortedDates;tempChart.data.datasets[0].data=sortedTValues;tempChart.update()}else{tempChart=new Chart(tCtx,{type:"line",data:{labels:sortedDates,datasets:[{label:temperatureLabel,data:sortedTValues,borderColor:"rgba(255, 159, 64, 1)",backgroundColor:tGradient,borderWidth:1,fill:!0}]},options:{scales:{yAxes:[{display:!1,ticks:{font:{size:6}}}]},layout:{padding:{top:0}}},})}
const latestTempValue=sortedTValues[sortedTValues.length-1];const previousTempValue=sortedTValues[sortedTValues.length-2];let indicatorTemp="";if(latestTempValue>previousTempValue){indicatorTemp='<span class="material-symbols-outlined" style="color: green; font-size: 2rem;">arrow_drop_up</span>'}else if(latestTempValue<previousTempValue){indicatorTemp='<span class="material-symbols-outlined" style="color: red; font-size: 2rem;">arrow_drop_down</span>'}
let headerContentTemp=`
    <span class="material-symbols-outlined" style="color: rgba(255, 159, 64, 1);">device_thermostat</span>
    &nbsp;
    <span style="color: rgba(255, 159, 64, 1)">${latestTempValue !== null ? latestTempValue.toFixed(2) : 'N/A'}</span>
    &nbsp;
    <span style="color: rgba(255, 159, 64, 1); font-size: 8px;" data-translate="latest measure">${getTranslatedText("latest measure")}</span>
    `;if(indicatorTemp!==""){headerContentTemp+=`&nbsp;&nbsp;${indicatorTemp}`}
document.querySelector(".headerTemp .title").innerHTML=headerContentTemp;let tempStatus="";let tempIcon="";let tempColor="";if(latestTempValue===null){tempStatus=`<span data-translate="No data">${getTranslatedText("No data")}</span>`;tempIcon='<span class="material-symbols-outlined" style="color: white; font-size: 1rem; margin-top: 2px;">info</span>';tempColor="#888888"}else{if(latestTempValue>=20&&latestTempValue<=30){tempStatus=`<span data-translate="Average Temp">${getTranslatedText("Average Temp")}</span>`;tempIcon='<span class="material-symbols-outlined" style="color: white; font-size: 1rem; margin-top: 2px;">done_all</span>';tempColor="#18A558"}else if(latestTempValue<20){tempStatus=`<span data-translate="Low Temp">${getTranslatedText("Low Temp")}</span>`;tempIcon='<span class="material-symbols-outlined" style="color: white; font-size: 1rem; margin-top: 2px;">warning</span>';tempColor="#BA0F30"}else{tempStatus=`<span data-translate="High Temp">${getTranslatedText("High Temp")}</span>`;tempIcon='<span class="material-symbols-outlined" style="color: white; font-size: 1rem; margin-top: 2px;">warning</span>';tempColor="#BA0F30"}}
let tempTooltipContainer=document.getElementById('temp-recommendation-container');if(!tempTooltipContainer){tempTooltipContainer=document.createElement('div');tempTooltipContainer.id='temp-recommendation-container';document.body.appendChild(tempTooltipContainer)}
const tempRecommendations=getTempRecommendation(tempStatus);tempTooltipContainer.innerHTML=`
        <span id="temprecommendation-tooltip" class="tooltip">
            <span class="material-icons-outlined" style="vertical-align: middle;">lightbulb</span>&nbsp;
            <span class="recommendation-header">${currentLang === 'en' ? 'Recommendations:' : 'Khuyến nghị:'}</span>
            <p>${tempRecommendations[currentLang]}</p>
        </span>
    `;let tempStatusElement=document.querySelector(".temp-status");if(!tempStatusElement){tempStatusElement=document.createElement("div");tempStatusElement.classList.add("temp-status")}
tempStatusElement.style.fontSize="10px";tempStatusElement.style.color="white";tempStatusElement.style.backgroundColor=tempColor;tempStatusElement.style.borderRadius="20px";tempStatusElement.style.padding="4px 5px";tempStatusElement.style.boxShadow="0 2px 4px rgba(0, 0, 0, 0.2)";const tempTextSpan=document.createElement("span");tempTextSpan.style.display="flex";tempTextSpan.style.alignItems="center";tempTextSpan.style.marginTop="-1px";tempTextSpan.innerHTML=`${tempIcon}&nbsp;${tempStatus}`;tempStatusElement.innerHTML='';tempStatusElement.appendChild(tempTextSpan);const headerTempSection=document.querySelector(".headerTemp");headerTempSection.appendChild(tempStatusElement);updateTempStatus()}
const buttons=document.querySelectorAll('.timeTrend-buttons button');buttons.forEach(button=>{button.addEventListener('click',function(){const timeRange=this.textContent;const endDate=new Date();let startDate;buttons.forEach(btn=>btn.classList.remove('active'));this.classList.add('active');switch(timeRange){case '1D':startDate=new Date(endDate.getTime()-1*24*60*60*1000);break;case '1W':startDate=new Date(endDate.getTime()-7*24*60*60*1000);break;case '2W':startDate=new Date(endDate.getTime()-14*24*60*60*1000);break;case '1M':startDate=new Date(endDate.getFullYear(),endDate.getMonth()-1,endDate.getDate());break;case '3M':startDate=new Date(endDate.getFullYear(),endDate.getMonth()-3,endDate.getDate());break;case '6M':startDate=new Date(endDate.getFullYear(),endDate.getMonth()-6,endDate.getDate());break;case '1Y':startDate=new Date(endDate.getFullYear()-1,endDate.getMonth(),endDate.getDate());break;case '3Y':startDate=new Date(endDate.getFullYear()-3,endDate.getMonth(),endDate.getDate());break;case '5Y':startDate=new Date(endDate.getFullYear()-5,endDate.getMonth(),endDate.getDate());break;default:return}
const filteredDates=sortedDates.filter(date=>new Date(date)>=startDate&&new Date(date)<=endDate);const filteredMoistValues=sortedMoistValues.filter((_,index)=>filteredDates.includes(sortedDates[index]));const filteredPHValues=sortedPHValues.filter((_,index)=>filteredDates.includes(sortedDates[index]));const filteredTValues=sortedTValues.filter((_,index)=>filteredDates.includes(sortedDates[index]));updateChart(moistChart,filteredDates,filteredMoistValues,'moistMinMax','%');updateChart(pHChart,filteredDates,filteredPHValues,'pHMinMax','pH');updateChart(tempChart,filteredDates,filteredTValues,'tempMinMax','°c');if(sortedNpkValues&&sortedNpkValues.length>0){const filteredNpkValues=sortedNpkValues.filter((_,index)=>filteredDates.includes(sortedDates[index]));updateChart(npkChart,filteredDates,filteredNpkValues,'npkMinMax','')}
if(sortedNtsValues&&sortedNtsValues.length>0){const filteredNtsValues=sortedNtsValues.filter((_,index)=>filteredDates.includes(sortedDates[index]));updateChart(ntsChart,filteredDates,filteredNtsValues,'ntsMinMax','%')}
if(sortedP205Values&&sortedP205Values.length>0){const filteredP205Values=sortedP205Values.filter((_,index)=>filteredDates.includes(sortedDates[index]));updateChart(p205Chart,filteredDates,filteredP205Values,'p205MinMax','')}
if(sortedk2oValues&&sortedk2oValues.length>0){const filteredk2oValues=sortedk2oValues.filter((_,index)=>filteredDates.includes(sortedDates[index]));updateChart(k2oChart,filteredDates,filteredk2oValues,'k2oMinMax','')}})});function updateChart(chart,labels,data,minMaxContainerId,unit){chart.data.labels=labels;chart.data.datasets[0].data=data;chart.update();const{min,max}=calculateMinMax(data);const minMaxContainer=document.getElementById(minMaxContainerId);if(minMaxContainer){minMaxContainer.innerHTML=`
                        <span style="color: ${chart.data.datasets[0].borderColor};">
                            <span class="material-symbols-outlined" style="color: #8B0000; font-size: 12px; vertical-align: middle;">arrow_drop_down</span>
                            <span data-translate="Min">${getTranslatedText("Min")}</span>: ${min === "-" ? "-" : min.toFixed(2) + unit} 
                            <span class="material-symbols-outlined" style="color: #006400; font-size: 12px; vertical-align: middle;">arrow_drop_up</span>
                            <span data-translate="Max">${getTranslatedText("Max")}</span>: ${max === "-" ? "-" : max.toFixed(2) + unit}
                        </span>
                    `}}
function updateMinMaxDisplays(){const minMaxContainers=document.querySelectorAll('[id$="MinMax"]');minMaxContainers.forEach(container=>{const minSpan=container.querySelector('[data-translate="Min"]');const maxSpan=container.querySelector('[data-translate="Max"]');if(minSpan)minSpan.textContent=getTranslatedText("Min");if(maxSpan)maxSpan.textContent=getTranslatedText("Max");})}
const latestMoistValue=sortedMoistValues.length>0?sortedMoistValues[sortedMoistValues.length-1]:null;const latestPHValue=sortedPHValues.length>0?sortedPHValues[sortedPHValues.length-1]:null;const latestTempValue=sortedTValues.length>0?sortedTValues[sortedTValues.length-1]:null;createOrUpdateGaugeCharts(latestMoistValue,latestPHValue,latestTempValue,data.npk?data.npk[data.npk.length-1]:undefined,data.nts?data.nts[data.nts.length-1]:undefined,data.p2o5?data.p2o5[data.p2o5.length-1]:undefined,data.k2o?data.k2o[data.k2o.length-1]:undefined)}).catch(function(error){console.log(error)})});function setActiveButton(button){const buttons=document.querySelectorAll('.timeTrend-buttons button');buttons.forEach(btn=>btn.classList.remove('active'));button.classList.add('active')}
function setupGaugeChart(canvasId,title,thresholds,defaultValue,minValue,maxValue,options){const data={datasets:[{data:[thresholds[0]-minValue,...thresholds.slice(1).map((t,i)=>t-thresholds[i]),maxValue-thresholds[thresholds.length-1]],backgroundColor:options.colors,needleValue:defaultValue,borderWidth:0,cutout:"85%",circumference:180,rotation:270,}]};const gaugeNeedle={id:"gaugeNeedle",afterDatasetDraw(chart,args,options){const{ctx,chartArea:{top,bottom,left,right,width,height}}=chart;ctx.save();const padding=2;const adjustedLeft=left+padding;const adjustedRight=right-padding;const adjustedWidth=width-2*padding;const needleValue=data.datasets[0].needleValue;const angle=Math.PI+(1/(maxValue-minValue))*(needleValue-minValue)*Math.PI;const cx=adjustedLeft+adjustedWidth/2;const cy=chart._metasets[0].data[0].y+10;ctx.translate(cx,cy);ctx.rotate(angle);ctx.beginPath();ctx.moveTo(0,-2);ctx.lineTo(height/2,0);ctx.lineTo(0,2);ctx.fillStyle="#444";ctx.fill();ctx.translate(-cx,-cy);ctx.beginPath();ctx.arc(cx,cy,5,0,Math.PI*2);ctx.fill();ctx.restore();ctx.font="12px 'Be Vietnam', sans-serif";ctx.fillStyle="#444";ctx.textAlign="center";let translatedTitle=title;if(title==="Độ ẩm (%)"){translatedTitle=getTranslatedText("Moisture (%)")}else if(title==="Nhiệt độ (°c)"){translatedTitle=getTranslatedText("Temperature (°c)")}
ctx.fillText(translatedTitle,cx,cy-83);ctx.font="bold 16px Be Vietnam";ctx.fillText(`${defaultValue.toFixed(2)}${options.unit || ''}`,cx,cy-20);ctx.font="bold 16px Be Vietnam";ctx.fillText(`${defaultValue === 0 ? '0.00' : defaultValue.toFixed(2)}${options.unit || ''}`,cx,cy-20);const radius=height/2+15;ctx.font="8px 'Be Vietnam', sans-serif";ctx.textAlign="center";ctx.textBaseline="middle";let tickValues;if(title==="NPK (%)"){tickValues=[50,100]}else if(title==="Độ ẩm (%)"){tickValues=[25,50,75]}else if(title==="pH"){tickValues=[4,7,10]}else if(title==="Nhiệt độ (°c)"){tickValues=[10,20,30,40]}else if(title==="NTS (%)"){tickValues=[0.1,0.15,0.2]}else if(title==="P2O5 (ppm)"){tickValues=[20,50,60]}else if(title==="K2O (ppm)"){tickValues=[50,100,150,200]}else{console.warn(`No tickValues defined for title: "${title}". Using default values.`);tickValues=[minValue,(minValue+maxValue)/2,maxValue]}
tickValues.forEach(value=>{const angle=Math.PI+((value-minValue)/(maxValue-minValue))*Math.PI;const x=cx+Math.cos(angle)*radius;const y=cy+Math.sin(angle)*radius;const labelRadius=radius-25;const labelX=cx+Math.cos(angle)*labelRadius;const labelY=cy+Math.sin(angle)*labelRadius;ctx.fillText(value.toString()+(options.unit||''),labelX,labelY)});ctx.font="10px 'Be Vietnam', sans-serif";ctx.textAlign="left";ctx.fillText(`${minValue}${options.unit || ''}`,adjustedLeft,bottom-20);ctx.textAlign="right";ctx.fillText(`${maxValue}${options.unit || ''}`,adjustedRight,bottom-20);if(options.thresholdLabels){ctx.font="10px 'Be Vietnam', sans-serif";ctx.textAlign="center";const labelY=bottom+15;const labelCount=options.thresholdLabels.length;options.thresholdLabels.forEach((label,index)=>{const labelX=adjustedLeft+adjustedWidth*(index+0.5)/labelCount;ctx.fillText(label,labelX,labelY)})}}};const config={type:"doughnut",data,options:{responsive:!0,plugins:{legend:{display:!1},tooltip:{enabled:!1},},},plugins:[gaugeNeedle],};return new Chart(document.getElementById(canvasId),config)}
